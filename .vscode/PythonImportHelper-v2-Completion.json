[
    {
        "label": "api.v1.endpoints",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "api.v1.endpoints",
        "description": "api.v1.endpoints",
        "detail": "api.v1.endpoints",
        "documentation": {}
    },
    {
        "label": "usuario",
        "importPath": "api.v1.endpoints",
        "description": "api.v1.endpoints",
        "isExtraImport": true,
        "detail": "api.v1.endpoints",
        "documentation": {}
    },
    {
        "label": "plantacao",
        "importPath": "api.v1.endpoints",
        "description": "api.v1.endpoints",
        "isExtraImport": true,
        "detail": "api.v1.endpoints",
        "documentation": {}
    },
    {
        "label": "fastapi.security",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "pydantic",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pydantic",
        "description": "pydantic",
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.ext.asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "UsuarioModel",
        "importPath": "models.usuario_model",
        "description": "models.usuario_model",
        "isExtraImport": true,
        "detail": "models.usuario_model",
        "documentation": {}
    },
    {
        "label": "UsuarioModel",
        "importPath": "models.usuario_model",
        "description": "models.usuario_model",
        "isExtraImport": true,
        "detail": "models.usuario_model",
        "documentation": {}
    },
    {
        "label": "UsuarioModel",
        "importPath": "models.usuario_model",
        "description": "models.usuario_model",
        "isExtraImport": true,
        "detail": "models.usuario_model",
        "documentation": {}
    },
    {
        "label": "UsuarioModel",
        "importPath": "models.usuario_model",
        "description": "models.usuario_model",
        "isExtraImport": true,
        "detail": "models.usuario_model",
        "documentation": {}
    },
    {
        "label": "UsuarioModel",
        "importPath": "models.usuario_model",
        "description": "models.usuario_model",
        "isExtraImport": true,
        "detail": "models.usuario_model",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "core.deps",
        "description": "core.deps",
        "isExtraImport": true,
        "detail": "core.deps",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "core.deps",
        "description": "core.deps",
        "isExtraImport": true,
        "detail": "core.deps",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "core.deps",
        "description": "core.deps",
        "isExtraImport": true,
        "detail": "core.deps",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "core.deps",
        "description": "core.deps",
        "isExtraImport": true,
        "detail": "core.deps",
        "documentation": {}
    },
    {
        "label": "gerar_hash_senha",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "comparar_senha",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "gerar_hash_senha",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "comparar_senha",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "gerar_hash_senha",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.usuario_schema",
        "description": "schemas.usuario_schema",
        "isExtraImport": true,
        "detail": "schemas.usuario_schema",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.usuario_schema",
        "description": "schemas.usuario_schema",
        "isExtraImport": true,
        "detail": "schemas.usuario_schema",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.usuario_schema",
        "description": "schemas.usuario_schema",
        "isExtraImport": true,
        "detail": "schemas.usuario_schema",
        "documentation": {}
    },
    {
        "label": "criar_acess_token",
        "importPath": "core.auth",
        "description": "core.auth",
        "isExtraImport": true,
        "detail": "core.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "core.auth",
        "description": "core.auth",
        "isExtraImport": true,
        "detail": "core.auth",
        "documentation": {}
    },
    {
        "label": "criar_acess_token",
        "importPath": "core.auth",
        "description": "core.auth",
        "isExtraImport": true,
        "detail": "core.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "core.auth",
        "description": "core.auth",
        "isExtraImport": true,
        "detail": "core.auth",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.configs",
        "description": "core.configs",
        "isExtraImport": true,
        "detail": "core.configs",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.configs",
        "description": "core.configs",
        "isExtraImport": true,
        "detail": "core.configs",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.configs",
        "description": "core.configs",
        "isExtraImport": true,
        "detail": "core.configs",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.configs",
        "description": "core.configs",
        "isExtraImport": true,
        "detail": "core.configs",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.configs",
        "description": "core.configs",
        "isExtraImport": true,
        "detail": "core.configs",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.configs",
        "description": "core.configs",
        "isExtraImport": true,
        "detail": "core.configs",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.configs",
        "description": "core.configs",
        "isExtraImport": true,
        "detail": "core.configs",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "core.database",
        "description": "core.database",
        "isExtraImport": true,
        "detail": "core.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "core.database",
        "description": "core.database",
        "isExtraImport": true,
        "detail": "core.database",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "core.database",
        "description": "core.database",
        "isExtraImport": true,
        "detail": "core.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "core.database",
        "description": "core.database",
        "isExtraImport": true,
        "detail": "core.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "core.database",
        "description": "core.database",
        "isExtraImport": true,
        "detail": "core.database",
        "documentation": {}
    },
    {
        "label": "influxdb_client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "InfluxDBClient",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "WritePrecision",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "InfluxDBClient",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "WritePrecision",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "InfluxDBClient",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "WritePrecision",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "InfluxDBClient",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "WritePrecision",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "InfluxDBClient",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "WritePrecision",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "InfluxDBClient",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "WritePrecision",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "InfluxDBClient",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "WritePrecision",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "InfluxDBClient",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "WritePrecision",
        "importPath": "influxdb_client",
        "description": "influxdb_client",
        "isExtraImport": true,
        "detail": "influxdb_client",
        "documentation": {}
    },
    {
        "label": "SYNCHRONOUS",
        "importPath": "influxdb_client.client.write_api",
        "description": "influxdb_client.client.write_api",
        "isExtraImport": true,
        "detail": "influxdb_client.client.write_api",
        "documentation": {}
    },
    {
        "label": "SYNCHRONOUS",
        "importPath": "influxdb_client.client.write_api",
        "description": "influxdb_client.client.write_api",
        "isExtraImport": true,
        "detail": "influxdb_client.client.write_api",
        "documentation": {}
    },
    {
        "label": "SYNCHRONOUS",
        "importPath": "influxdb_client.client.write_api",
        "description": "influxdb_client.client.write_api",
        "isExtraImport": true,
        "detail": "influxdb_client.client.write_api",
        "documentation": {}
    },
    {
        "label": "SYNCHRONOUS",
        "importPath": "influxdb_client.client.write_api",
        "description": "influxdb_client.client.write_api",
        "isExtraImport": true,
        "detail": "influxdb_client.client.write_api",
        "documentation": {}
    },
    {
        "label": "SYNCHRONOUS",
        "importPath": "influxdb_client.client.write_api",
        "description": "influxdb_client.client.write_api",
        "isExtraImport": true,
        "detail": "influxdb_client.client.write_api",
        "documentation": {}
    },
    {
        "label": "SYNCHRONOUS",
        "importPath": "influxdb_client.client.write_api",
        "description": "influxdb_client.client.write_api",
        "isExtraImport": true,
        "detail": "influxdb_client.client.write_api",
        "documentation": {}
    },
    {
        "label": "SYNCHRONOUS",
        "importPath": "influxdb_client.client.write_api",
        "description": "influxdb_client.client.write_api",
        "isExtraImport": true,
        "detail": "influxdb_client.client.write_api",
        "documentation": {}
    },
    {
        "label": "influxdb_client,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "influxdb_client.",
        "description": "influxdb_client.",
        "detail": "influxdb_client.",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose.exceptions",
        "description": "jose.exceptions",
        "isExtraImport": true,
        "detail": "jose.exceptions",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TarefaModel",
        "importPath": "models.tarefa_model",
        "description": "models.tarefa_model",
        "isExtraImport": true,
        "detail": "models.tarefa_model",
        "documentation": {}
    },
    {
        "label": "TarefaSchema",
        "importPath": "schemas.tarefa_schema",
        "description": "schemas.tarefa_schema",
        "isExtraImport": true,
        "detail": "schemas.tarefa_schema",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "api_router",
        "importPath": "api.v1.api",
        "description": "api.v1.api",
        "isExtraImport": true,
        "detail": "api.v1.api",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Simulator",
        "importPath": "simulator",
        "description": "simulator",
        "isExtraImport": true,
        "detail": "simulator",
        "documentation": {}
    },
    {
        "label": "Simulator",
        "importPath": "simulator",
        "description": "simulator",
        "isExtraImport": true,
        "detail": "simulator",
        "documentation": {}
    },
    {
        "label": "Simulator",
        "importPath": "simulator",
        "description": "simulator",
        "isExtraImport": true,
        "detail": "simulator",
        "documentation": {}
    },
    {
        "label": "Simulator",
        "importPath": "simulator",
        "description": "simulator",
        "isExtraImport": true,
        "detail": "simulator",
        "documentation": {}
    },
    {
        "label": "paho.mqtt.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paho.mqtt.client",
        "description": "paho.mqtt.client",
        "detail": "paho.mqtt.client",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "TopicAuto",
        "importPath": "topic",
        "description": "topic",
        "isExtraImport": true,
        "detail": "topic",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Backend.api.v1.endpoints.plantacao",
        "description": "Backend.api.v1.endpoints.plantacao",
        "peekOfCode": "client = InfluxDBClient(url=settings.INFLUXDB_URL, token=settings.INFLUXDB_TOKEN, org=settings.INFLUXDB_ORG)\nrouter = APIRouter(dependencies=[Depends(get_current_user)])\n@router.post('/', status_code=status.HTTP_201_CREATED)\nasync def post_usuario():\n    return 'plantacao post'\n@router.get('/')\nasync def getAll():\n    query = 'from(bucket: \"irrigation\") |> range(start: -1d) |> limit(n: 10)'\n    result = client.query_api().query(org=settings.INFLUXDB_ORG, query=query)\n    data = []",
        "detail": "Backend.api.v1.endpoints.plantacao",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "Backend.api.v1.endpoints.plantacao",
        "description": "Backend.api.v1.endpoints.plantacao",
        "peekOfCode": "router = APIRouter(dependencies=[Depends(get_current_user)])\n@router.post('/', status_code=status.HTTP_201_CREATED)\nasync def post_usuario():\n    return 'plantacao post'\n@router.get('/')\nasync def getAll():\n    query = 'from(bucket: \"irrigation\") |> range(start: -1d) |> limit(n: 10)'\n    result = client.query_api().query(org=settings.INFLUXDB_ORG, query=query)\n    data = []\n    for table in result:",
        "detail": "Backend.api.v1.endpoints.plantacao",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Backend.api.v1.endpoints.usuario",
        "description": "Backend.api.v1.endpoints.usuario",
        "peekOfCode": "client = InfluxDBClient(url=settings.INFLUXDB_URL, token=settings.INFLUXDB_TOKEN, org=settings.INFLUXDB_ORG)\nrouter = APIRouter(dependencies=[Depends(get_current_user)])\nrouterLogin = APIRouter()\n@routerLogin.post('/signup', status_code=status.HTTP_201_CREATED)\nasync def post_usuario(usuario: UsuarioSchemaCreate):\n    query = 'from(bucket: \"Usuarios\") |> range(start: -1d) |> limit(n: 10)'\n    result = client.query_api().query(org=settings.INFLUXDB_ORG, query=query)\n    data = []\n    for table in result:\n        for record in table.records:",
        "detail": "Backend.api.v1.endpoints.usuario",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "Backend.api.v1.endpoints.usuario",
        "description": "Backend.api.v1.endpoints.usuario",
        "peekOfCode": "router = APIRouter(dependencies=[Depends(get_current_user)])\nrouterLogin = APIRouter()\n@routerLogin.post('/signup', status_code=status.HTTP_201_CREATED)\nasync def post_usuario(usuario: UsuarioSchemaCreate):\n    query = 'from(bucket: \"Usuarios\") |> range(start: -1d) |> limit(n: 10)'\n    result = client.query_api().query(org=settings.INFLUXDB_ORG, query=query)\n    data = []\n    for table in result:\n        for record in table.records:\n            if record.values[\"email\"] == usuario.email:",
        "detail": "Backend.api.v1.endpoints.usuario",
        "documentation": {}
    },
    {
        "label": "routerLogin",
        "kind": 5,
        "importPath": "Backend.api.v1.endpoints.usuario",
        "description": "Backend.api.v1.endpoints.usuario",
        "peekOfCode": "routerLogin = APIRouter()\n@routerLogin.post('/signup', status_code=status.HTTP_201_CREATED)\nasync def post_usuario(usuario: UsuarioSchemaCreate):\n    query = 'from(bucket: \"Usuarios\") |> range(start: -1d) |> limit(n: 10)'\n    result = client.query_api().query(org=settings.INFLUXDB_ORG, query=query)\n    data = []\n    for table in result:\n        for record in table.records:\n            if record.values[\"email\"] == usuario.email:\n                data.append(record.values)",
        "detail": "Backend.api.v1.endpoints.usuario",
        "documentation": {}
    },
    {
        "label": "api_router",
        "kind": 5,
        "importPath": "Backend.api.v1.api",
        "description": "Backend.api.v1.api",
        "peekOfCode": "api_router = APIRouter()\napi_router.include_router(usuario.router, prefix='/usuarios', tags=['usuarios'])\napi_router.include_router(plantacao.router, prefix='/plantacao', tags=['plantacao'])\napi_router.include_router(usuario.routerLogin, prefix='/usuarios', tags=['usuarios'])",
        "detail": "Backend.api.v1.api",
        "documentation": {}
    },
    {
        "label": "criar_acess_token",
        "kind": 2,
        "importPath": "Backend.core.auth",
        "description": "Backend.core.auth",
        "peekOfCode": "def criar_acess_token(usuario_id: str):\n    expiracao = str(datetime.utcnow() + timedelta(EXPIRES_IN_MIN))\n    payload = {\n        'sub': usuario_id,\n        'ext': expiracao\n        }\n    token_jwt = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITH)\n    return token_jwt\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(",
        "detail": "Backend.core.auth",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Backend.core.auth",
        "description": "Backend.core.auth",
        "peekOfCode": "client = InfluxDBClient(url=settings.INFLUXDB_URL, token=settings.INFLUXDB_TOKEN, org=settings.INFLUXDB_ORG)\nSECRET_KEY: str = 'j7kUqCye2TUYwX7IsjE4Yx718l0FNbBAwKyuJ32G2es'\nALGORITH: str = 'HS256'\nEXPIRES_IN_MIN = 60*24*7\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/api/v1/usuarios/login\")\ndef criar_acess_token(usuario_id: str):\n    expiracao = str(datetime.utcnow() + timedelta(EXPIRES_IN_MIN))\n    payload = {\n        'sub': usuario_id,\n        'ext': expiracao",
        "detail": "Backend.core.auth",
        "documentation": {}
    },
    {
        "label": "EXPIRES_IN_MIN",
        "kind": 5,
        "importPath": "Backend.core.auth",
        "description": "Backend.core.auth",
        "peekOfCode": "EXPIRES_IN_MIN = 60*24*7\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/api/v1/usuarios/login\")\ndef criar_acess_token(usuario_id: str):\n    expiracao = str(datetime.utcnow() + timedelta(EXPIRES_IN_MIN))\n    payload = {\n        'sub': usuario_id,\n        'ext': expiracao\n        }\n    token_jwt = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITH)\n    return token_jwt",
        "detail": "Backend.core.auth",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "Backend.core.auth",
        "description": "Backend.core.auth",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/api/v1/usuarios/login\")\ndef criar_acess_token(usuario_id: str):\n    expiracao = str(datetime.utcnow() + timedelta(EXPIRES_IN_MIN))\n    payload = {\n        'sub': usuario_id,\n        'ext': expiracao\n        }\n    token_jwt = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITH)\n    return token_jwt\nasync def get_current_user(token: str = Depends(oauth2_scheme)):",
        "detail": "Backend.core.auth",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "Backend.core.configs",
        "description": "Backend.core.configs",
        "peekOfCode": "class Settings(BaseSettings):\n    API_V1: str = '/api/v1'\n    DB_URL: str = 'mysql+asyncmy://root:root@localhost/seed?charset=utf8mb4'\n    BUCKET: str =\"Usuarios\"\n    DBBaseModel: str = declarative_base()\n    INFLUXDB_TOKEN: str = \"167x85pD7ILjp39izsESGQiffxb3MXrEKP8jcay_r_uullGq47QQ7DebXNgDQ0pQG3hP8ZQlhcDB66vJMv_OZg==\"\n    INFLUXDB_URL: str = \"http://localhost:8086\"\n    INFLUXDB_ORG: str = \"my-org\"\n    class Config:\n        case_sensitive: True",
        "detail": "Backend.core.configs",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "Backend.core.configs",
        "description": "Backend.core.configs",
        "peekOfCode": "settings = Settings()",
        "detail": "Backend.core.configs",
        "documentation": {}
    },
    {
        "label": "gerar_hash_senha",
        "kind": 2,
        "importPath": "Backend.core.security",
        "description": "Backend.core.security",
        "peekOfCode": "def gerar_hash_senha(senha: str) -> str:\n    return CRIPTO.hash(senha)\ndef comparar_senha(senha: str, hash_senha: str) -> bool:\n    return CRIPTO.verify(senha, hash_senha)",
        "detail": "Backend.core.security",
        "documentation": {}
    },
    {
        "label": "comparar_senha",
        "kind": 2,
        "importPath": "Backend.core.security",
        "description": "Backend.core.security",
        "peekOfCode": "def comparar_senha(senha: str, hash_senha: str) -> bool:\n    return CRIPTO.verify(senha, hash_senha)",
        "detail": "Backend.core.security",
        "documentation": {}
    },
    {
        "label": "CRIPTO",
        "kind": 5,
        "importPath": "Backend.core.security",
        "description": "Backend.core.security",
        "peekOfCode": "CRIPTO = CryptContext(schemes=['bcrypt'], deprecated='auto')\ndef gerar_hash_senha(senha: str) -> str:\n    return CRIPTO.hash(senha)\ndef comparar_senha(senha: str, hash_senha: str) -> bool:\n    return CRIPTO.verify(senha, hash_senha)",
        "detail": "Backend.core.security",
        "documentation": {}
    },
    {
        "label": "UsuarioModel",
        "kind": 6,
        "importPath": "Backend.models.usuario_model",
        "description": "Backend.models.usuario_model",
        "peekOfCode": "class UsuarioModel(settings.DBBaseModel):\n    __tablename__ = 'usuarios' \n    id: int = Column(Integer, primary_key=True, autoincrement=True)\n    nome: str = Column(String(255), nullable= True)\n    imagem: str = Column(String(255), nullable= True)\n    email: str = Column(String(255), nullable=False, unique=True)\n    senha: str = Column(String(255), nullable= False)\n    criado_em: str = Column(DateTime, nullable= True)\n    atualizado_em: str = Column(DateTime, nullable= True)",
        "detail": "Backend.models.usuario_model",
        "documentation": {}
    },
    {
        "label": "TarefaSchema",
        "kind": 6,
        "importPath": "Backend.schemas.tarefa_schema",
        "description": "Backend.schemas.tarefa_schema",
        "peekOfCode": "class TarefaSchema(SCBaseModel):\n    id: Optional[int]\n    usuario_id: Optional[int]\n    nome: str\n    descricao: str\n    concluido: bool\n    criado_em: Optional[datetime]\n    atualizado_em: Optional[datetime]\n    class Config:\n        orm_mode = True",
        "detail": "Backend.schemas.tarefa_schema",
        "documentation": {}
    },
    {
        "label": "UsuarioSchemaBase",
        "kind": 6,
        "importPath": "Backend.schemas.usuario_schema",
        "description": "Backend.schemas.usuario_schema",
        "peekOfCode": "class UsuarioSchemaBase(SCBaseModel):\n    id: Optional[int]\n    nome: str\n    email: str\n    imagem: Optional[str]\n    criado_em: Optional[datetime]\n    atualizado_em: Optional[datetime]\n    class Config:\n        orm_mode = True\nclass UsuarioSchemaCreate(UsuarioSchemaBase):",
        "detail": "Backend.schemas.usuario_schema",
        "documentation": {}
    },
    {
        "label": "UsuarioSchemaCreate",
        "kind": 6,
        "importPath": "Backend.schemas.usuario_schema",
        "description": "Backend.schemas.usuario_schema",
        "peekOfCode": "class UsuarioSchemaCreate(UsuarioSchemaBase):\n    senha: str\n    class Config:\n        orm_mode = True\nclass UsuarioSchemaToken(SCBaseModel):\n    usuario: UsuarioSchemaBase\n    acess_token: str\nclass UsuarioSchemaTarefa(UsuarioSchemaBase):\n    tarefas: List[TarefaSchema]",
        "detail": "Backend.schemas.usuario_schema",
        "documentation": {}
    },
    {
        "label": "UsuarioSchemaToken",
        "kind": 6,
        "importPath": "Backend.schemas.usuario_schema",
        "description": "Backend.schemas.usuario_schema",
        "peekOfCode": "class UsuarioSchemaToken(SCBaseModel):\n    usuario: UsuarioSchemaBase\n    acess_token: str\nclass UsuarioSchemaTarefa(UsuarioSchemaBase):\n    tarefas: List[TarefaSchema]",
        "detail": "Backend.schemas.usuario_schema",
        "documentation": {}
    },
    {
        "label": "UsuarioSchemaTarefa",
        "kind": 6,
        "importPath": "Backend.schemas.usuario_schema",
        "description": "Backend.schemas.usuario_schema",
        "peekOfCode": "class UsuarioSchemaTarefa(UsuarioSchemaBase):\n    tarefas: List[TarefaSchema]",
        "detail": "Backend.schemas.usuario_schema",
        "documentation": {}
    },
    {
        "label": "core_path",
        "kind": 5,
        "importPath": "Backend.seed.usuario_seeder",
        "description": "Backend.seed.usuario_seeder",
        "peekOfCode": "core_path = os.path.abspath(\"./\")\nsys.path.append(core_path)\nfrom typing import Generator\nfrom datetime import datetime\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom models.usuario_model import UsuarioModel\nfrom core.security import gerar_hash_senha\nfrom fastapi import Depends\nfrom sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker\nfrom core.database import engine ",
        "detail": "Backend.seed.usuario_seeder",
        "documentation": {}
    },
    {
        "label": "testeInfluxDb",
        "kind": 2,
        "importPath": "Backend.criar_tabelas",
        "description": "Backend.criar_tabelas",
        "peekOfCode": "def testeInfluxDb():\n    import os\n    bucket=\"Usuarios\"\n    # Criação do cliente InfluxDB\n    client = InfluxDBClient(url=settings.INFLUXDB_URL, token=settings.INFLUXDB_TOKEN, org=settings.INFLUXDB_ORG)\n    # Criação do WriteApi\n    write_api = client.write_api(write_options=SYNCHRONOUS)\n    # Dados do usuário\n    email = \"root@root.com\"\n    senha = \"$2b$12$O4fqRQV.jT/oBD6WagmJa.PqYro8L/LYwy4otTz506UPUXiysGtgC\"",
        "detail": "Backend.criar_tabelas",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Backend.main",
        "description": "Backend.main",
        "peekOfCode": "app = FastAPI(title='API - Tarefas')\napp.include_router(api_router, prefix=settings.API_V1)\norigins = [\n    \"http://localhost\",\n    \"http://localhost:8080\",\n    \"http://127.0.0.1:5173\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,",
        "detail": "Backend.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "Backend.main",
        "description": "Backend.main",
        "peekOfCode": "origins = [\n    \"http://localhost\",\n    \"http://localhost:8080\",\n    \"http://127.0.0.1:5173\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],",
        "detail": "Backend.main",
        "documentation": {}
    },
    {
        "label": "default_settings",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.main",
        "description": "mqtt-simulator.mqtt-simulator.main",
        "peekOfCode": "def default_settings():\n    base_folder = Path(__file__).resolve().parent.parent\n    settings_file = base_folder / 'config/settings.json'\n    return settings_file\ndef is_valid_file(parser, arg):\n    settings_file = Path(arg)\n    if not settings_file.is_file():\n        return parser.error(f\"argument -f/--file: can't open '{arg}'\")\n    return settings_file\nparser = argparse.ArgumentParser()",
        "detail": "mqtt-simulator.mqtt-simulator.main",
        "documentation": {}
    },
    {
        "label": "is_valid_file",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.main",
        "description": "mqtt-simulator.mqtt-simulator.main",
        "peekOfCode": "def is_valid_file(parser, arg):\n    settings_file = Path(arg)\n    if not settings_file.is_file():\n        return parser.error(f\"argument -f/--file: can't open '{arg}'\")\n    return settings_file\nparser = argparse.ArgumentParser()\nparser.add_argument('-f', '--file', dest='settings_file', type=lambda x: is_valid_file(parser, x), help='settings file', default=default_settings())\nargs = parser.parse_args()\nsimulator = Simulator(args.settings_file)\nsimulator.run()",
        "detail": "mqtt-simulator.mqtt-simulator.main",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.main",
        "description": "mqtt-simulator.mqtt-simulator.main",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument('-f', '--file', dest='settings_file', type=lambda x: is_valid_file(parser, x), help='settings file', default=default_settings())\nargs = parser.parse_args()\nsimulator = Simulator(args.settings_file)\nsimulator.run()",
        "detail": "mqtt-simulator.mqtt-simulator.main",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.main",
        "description": "mqtt-simulator.mqtt-simulator.main",
        "peekOfCode": "args = parser.parse_args()\nsimulator = Simulator(args.settings_file)\nsimulator.run()",
        "detail": "mqtt-simulator.mqtt-simulator.main",
        "documentation": {}
    },
    {
        "label": "simulator",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.main",
        "description": "mqtt-simulator.mqtt-simulator.main",
        "peekOfCode": "simulator = Simulator(args.settings_file)\nsimulator.run()",
        "detail": "mqtt-simulator.mqtt-simulator.main",
        "documentation": {}
    },
    {
        "label": "on_connect",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.novo_script",
        "description": "mqtt-simulator.mqtt-simulator.novo_script",
        "peekOfCode": "def on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")\n# Cria um cliente MQTT\nmqtt_client = mqtt.Client()\n# Define as funções de callback",
        "detail": "mqtt-simulator.mqtt-simulator.novo_script",
        "documentation": {}
    },
    {
        "label": "on_message",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.novo_script",
        "description": "mqtt-simulator.mqtt-simulator.novo_script",
        "peekOfCode": "def on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")\n# Cria um cliente MQTT\nmqtt_client = mqtt.Client()\n# Define as funções de callback\nmqtt_client.on_connect = on_connect\nmqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT",
        "detail": "mqtt-simulator.mqtt-simulator.novo_script",
        "documentation": {}
    },
    {
        "label": "broker_url",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.novo_script",
        "description": "mqtt-simulator.mqtt-simulator.novo_script",
        "peekOfCode": "broker_url = \"localhost\"  # Endereço IP do HiveMQ\nbroker_port = 1883  # Porta do HiveMQ\ntopic_prefix = \"irrigation\"  # Prefixo dos tópicos a serem inscritos\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):",
        "detail": "mqtt-simulator.mqtt-simulator.novo_script",
        "documentation": {}
    },
    {
        "label": "broker_port",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.novo_script",
        "description": "mqtt-simulator.mqtt-simulator.novo_script",
        "peekOfCode": "broker_port = 1883  # Porta do HiveMQ\ntopic_prefix = \"irrigation\"  # Prefixo dos tópicos a serem inscritos\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")",
        "detail": "mqtt-simulator.mqtt-simulator.novo_script",
        "documentation": {}
    },
    {
        "label": "topic_prefix",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.novo_script",
        "description": "mqtt-simulator.mqtt-simulator.novo_script",
        "peekOfCode": "topic_prefix = \"irrigation\"  # Prefixo dos tópicos a serem inscritos\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")\n# Cria um cliente MQTT",
        "detail": "mqtt-simulator.mqtt-simulator.novo_script",
        "documentation": {}
    },
    {
        "label": "mqtt_client",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.novo_script",
        "description": "mqtt-simulator.mqtt-simulator.novo_script",
        "peekOfCode": "mqtt_client = mqtt.Client()\n# Define as funções de callback\nmqtt_client.on_connect = on_connect\nmqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT\nmqtt_client.loop_forever()",
        "detail": "mqtt-simulator.mqtt-simulator.novo_script",
        "documentation": {}
    },
    {
        "label": "mqtt_client.on_connect",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.novo_script",
        "description": "mqtt-simulator.mqtt-simulator.novo_script",
        "peekOfCode": "mqtt_client.on_connect = on_connect\nmqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT\nmqtt_client.loop_forever()",
        "detail": "mqtt-simulator.mqtt-simulator.novo_script",
        "documentation": {}
    },
    {
        "label": "mqtt_client.on_message",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.novo_script",
        "description": "mqtt-simulator.mqtt-simulator.novo_script",
        "peekOfCode": "mqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT\nmqtt_client.loop_forever()",
        "detail": "mqtt-simulator.mqtt-simulator.novo_script",
        "documentation": {}
    },
    {
        "label": "on_connect",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "def on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")\n# Função para validar o arquivo de configurações\ndef is_valid_file(parser, arg):\n    settings_file = Path(arg)",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "on_message",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "def on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")\n# Função para validar o arquivo de configurações\ndef is_valid_file(parser, arg):\n    settings_file = Path(arg)\n    if not settings_file.is_file():\n        return parser.error(f\"argument -f/--file: can't open '{arg}'\")\n    return settings_file\n# Cria um cliente MQTT\nmqtt_client = mqtt.Client()",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "is_valid_file",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "def is_valid_file(parser, arg):\n    settings_file = Path(arg)\n    if not settings_file.is_file():\n        return parser.error(f\"argument -f/--file: can't open '{arg}'\")\n    return settings_file\n# Cria um cliente MQTT\nmqtt_client = mqtt.Client()\n# Define as funções de callback\nmqtt_client.on_connect = on_connect\nmqtt_client.on_message = on_message",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "default_settings",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "def default_settings():\n    base_folder = Path(__file__).resolve().parent.parent\n    settings_file = base_folder / \"config/settings.json\"\n    return settings_file\nparser = argparse.ArgumentParser()\nparser.add_argument(\n    \"-f\",\n    \"--file\",\n    dest=\"settings_file\",\n    type=lambda x: is_valid_file(parser, x),",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "broker_url",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "broker_url = \"localhost\"  # Endereço IP do HiveMQ\nbroker_port = 1883  # Porta do HiveMQ\ntopic_prefix = \"irrigation\"  # Prefixo dos tópicos a serem inscritos\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "broker_port",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "broker_port = 1883  # Porta do HiveMQ\ntopic_prefix = \"irrigation\"  # Prefixo dos tópicos a serem inscritos\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "topic_prefix",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "topic_prefix = \"irrigation\"  # Prefixo dos tópicos a serem inscritos\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")\n# Função para validar o arquivo de configurações",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "mqtt_client",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "mqtt_client = mqtt.Client()\n# Define as funções de callback\nmqtt_client.on_connect = on_connect\nmqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT\nmqtt_client.loop_start()\n# Configurações do simulador\ndef default_settings():",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "mqtt_client.on_connect",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "mqtt_client.on_connect = on_connect\nmqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT\nmqtt_client.loop_start()\n# Configurações do simulador\ndef default_settings():\n    base_folder = Path(__file__).resolve().parent.parent\n    settings_file = base_folder / \"config/settings.json\"",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "mqtt_client.on_message",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "mqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT\nmqtt_client.loop_start()\n# Configurações do simulador\ndef default_settings():\n    base_folder = Path(__file__).resolve().parent.parent\n    settings_file = base_folder / \"config/settings.json\"\n    return settings_file",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\n    \"-f\",\n    \"--file\",\n    dest=\"settings_file\",\n    type=lambda x: is_valid_file(parser, x),\n    help=\"settings file\",\n    default=default_settings(),\n)\nargs = parser.parse_args()",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "args = parser.parse_args()\n# INFLUX DB\nimport influxdb_client\nimport os\nimport time\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision\nfrom influxdb_client.client.write_api import SYNCHRONOUS\ntoken = \"pCEvuFp9aKDrFFXPKbTDQUN80BLtemqAmHoxpW7lR4md-ZUmcdlIp4IH8Nq-E_U-pu3didUA-FK4T907DSG7-Q==\"\norg = \"my-org\"\nurl = \"http://localhost:8086\"",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "token = \"pCEvuFp9aKDrFFXPKbTDQUN80BLtemqAmHoxpW7lR4md-ZUmcdlIp4IH8Nq-E_U-pu3didUA-FK4T907DSG7-Q==\"\norg = \"my-org\"\nurl = \"http://localhost:8086\"\nwrite_client = influxdb_client.InfluxDBClient(url=url, token=token, org=org)\nbucket = \"irrigation\"\nwrite_api = write_client.write_api(write_options=SYNCHRONOUS)\nfor value in range(5):\n    point = Point(\"measurement1\").tag(\"tagname1\", \"tagvalue1\").field(\"field1\", value)\n    write_api.write(bucket=bucket, org=org, record=point)\n    time.sleep(1)  # separate points by 1 second",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "org",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "org = \"my-org\"\nurl = \"http://localhost:8086\"\nwrite_client = influxdb_client.InfluxDBClient(url=url, token=token, org=org)\nbucket = \"irrigation\"\nwrite_api = write_client.write_api(write_options=SYNCHRONOUS)\nfor value in range(5):\n    point = Point(\"measurement1\").tag(\"tagname1\", \"tagvalue1\").field(\"field1\", value)\n    write_api.write(bucket=bucket, org=org, record=point)\n    time.sleep(1)  # separate points by 1 second\nquery_api = write_client.query_api()",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "url = \"http://localhost:8086\"\nwrite_client = influxdb_client.InfluxDBClient(url=url, token=token, org=org)\nbucket = \"irrigation\"\nwrite_api = write_client.write_api(write_options=SYNCHRONOUS)\nfor value in range(5):\n    point = Point(\"measurement1\").tag(\"tagname1\", \"tagvalue1\").field(\"field1\", value)\n    write_api.write(bucket=bucket, org=org, record=point)\n    time.sleep(1)  # separate points by 1 second\nquery_api = write_client.query_api()\nquery = \"\"\"from(bucket: \"irrigation\")",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "write_client",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "write_client = influxdb_client.InfluxDBClient(url=url, token=token, org=org)\nbucket = \"irrigation\"\nwrite_api = write_client.write_api(write_options=SYNCHRONOUS)\nfor value in range(5):\n    point = Point(\"measurement1\").tag(\"tagname1\", \"tagvalue1\").field(\"field1\", value)\n    write_api.write(bucket=bucket, org=org, record=point)\n    time.sleep(1)  # separate points by 1 second\nquery_api = write_client.query_api()\nquery = \"\"\"from(bucket: \"irrigation\")\n |> range(start: -10m)",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "bucket",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "bucket = \"irrigation\"\nwrite_api = write_client.write_api(write_options=SYNCHRONOUS)\nfor value in range(5):\n    point = Point(\"measurement1\").tag(\"tagname1\", \"tagvalue1\").field(\"field1\", value)\n    write_api.write(bucket=bucket, org=org, record=point)\n    time.sleep(1)  # separate points by 1 second\nquery_api = write_client.query_api()\nquery = \"\"\"from(bucket: \"irrigation\")\n |> range(start: -10m)\n |> filter(fn: (r) => r._measurement == \"measurement1\")\"\"\"",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "write_api",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "write_api = write_client.write_api(write_options=SYNCHRONOUS)\nfor value in range(5):\n    point = Point(\"measurement1\").tag(\"tagname1\", \"tagvalue1\").field(\"field1\", value)\n    write_api.write(bucket=bucket, org=org, record=point)\n    time.sleep(1)  # separate points by 1 second\nquery_api = write_client.query_api()\nquery = \"\"\"from(bucket: \"irrigation\")\n |> range(start: -10m)\n |> filter(fn: (r) => r._measurement == \"measurement1\")\"\"\"\ntables = query_api.query(query, org=\"my-org\")",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "query_api",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "query_api = write_client.query_api()\nquery = \"\"\"from(bucket: \"irrigation\")\n |> range(start: -10m)\n |> filter(fn: (r) => r._measurement == \"measurement1\")\"\"\"\ntables = query_api.query(query, org=\"my-org\")\nfor table in tables:\n    for record in table.records:\n        print(record)\n# Inicia o simulador com as configurações fornecidas\nsimulator = Simulator(args.settings_file)",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "query",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "query = \"\"\"from(bucket: \"irrigation\")\n |> range(start: -10m)\n |> filter(fn: (r) => r._measurement == \"measurement1\")\"\"\"\ntables = query_api.query(query, org=\"my-org\")\nfor table in tables:\n    for record in table.records:\n        print(record)\n# Inicia o simulador com as configurações fornecidas\nsimulator = Simulator(args.settings_file)\nsimulator.run()",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "tables",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "tables = query_api.query(query, org=\"my-org\")\nfor table in tables:\n    for record in table.records:\n        print(record)\n# Inicia o simulador com as configurações fornecidas\nsimulator = Simulator(args.settings_file)\nsimulator.run()",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "simulator",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_novato",
        "description": "mqtt-simulator.mqtt-simulator.script_novato",
        "peekOfCode": "simulator = Simulator(args.settings_file)\nsimulator.run()",
        "detail": "mqtt-simulator.mqtt-simulator.script_novato",
        "documentation": {}
    },
    {
        "label": "on_connect",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "def on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")\n# Função para validar o arquivo de configurações\ndef is_valid_file(parser, arg):\n    settings_file = Path(arg)",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "on_message",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "def on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")\n# Função para validar o arquivo de configurações\ndef is_valid_file(parser, arg):\n    settings_file = Path(arg)\n    if not settings_file.is_file():\n        return parser.error(f\"argument -f/--file: can't open '{arg}'\")\n    return settings_file\n# Cria um cliente MQTT\nmqtt_client = mqtt.Client()",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "is_valid_file",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "def is_valid_file(parser, arg):\n    settings_file = Path(arg)\n    if not settings_file.is_file():\n        return parser.error(f\"argument -f/--file: can't open '{arg}'\")\n    return settings_file\n# Cria um cliente MQTT\nmqtt_client = mqtt.Client()\n# Define as funções de callback\nmqtt_client.on_connect = on_connect\nmqtt_client.on_message = on_message",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "default_settings",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "def default_settings():\n    base_folder = Path(__file__).resolve().parent.parent\n    settings_file = base_folder / \"config/settings.json\"\n    return settings_file\nparser = argparse.ArgumentParser()\nparser.add_argument(\n    \"-f\",\n    \"--file\",\n    dest=\"settings_file\",\n    type=lambda x: is_valid_file(parser, x),",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "broker_url",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "broker_url = \"localhost\"  # Endereço IP do HiveMQ\nbroker_port = 1883  # Porta do HiveMQ\ntopic_prefix = \"irrigation\"  # Prefixo dos tópicos a serem inscritos\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "broker_port",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "broker_port = 1883  # Porta do HiveMQ\ntopic_prefix = \"irrigation\"  # Prefixo dos tópicos a serem inscritos\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "topic_prefix",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "topic_prefix = \"irrigation\"  # Prefixo dos tópicos a serem inscritos\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")\n# Função para validar o arquivo de configurações",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "mqtt_client",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "mqtt_client = mqtt.Client()\n# Define as funções de callback\nmqtt_client.on_connect = on_connect\nmqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT\nmqtt_client.loop_start()\n# Configurações do simulador\ndef default_settings():",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "mqtt_client.on_connect",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "mqtt_client.on_connect = on_connect\nmqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT\nmqtt_client.loop_start()\n# Configurações do simulador\ndef default_settings():\n    base_folder = Path(__file__).resolve().parent.parent\n    settings_file = base_folder / \"config/settings.json\"",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "mqtt_client.on_message",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "mqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT\nmqtt_client.loop_start()\n# Configurações do simulador\ndef default_settings():\n    base_folder = Path(__file__).resolve().parent.parent\n    settings_file = base_folder / \"config/settings.json\"\n    return settings_file",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\n    \"-f\",\n    \"--file\",\n    dest=\"settings_file\",\n    type=lambda x: is_valid_file(parser, x),\n    help=\"settings file\",\n    default=default_settings(),\n)\nargs = parser.parse_args()",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "args = parser.parse_args()\n# Lê as configurações do JSON\nwith open(args.settings_file) as json_file:\n    config = json.load(json_file)\ninflux_config = config[\"INFLUX_DB\"]\nurl = influx_config[\"URL\"]\ntoken = influx_config[\"TOKEN\"]\norg = influx_config[\"ORG\"]\nbucket = influx_config[\"BUCKET\"]\n# Cria o ponto de dados",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "influx_config",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "influx_config = config[\"INFLUX_DB\"]\nurl = influx_config[\"URL\"]\ntoken = influx_config[\"TOKEN\"]\norg = influx_config[\"ORG\"]\nbucket = influx_config[\"BUCKET\"]\n# Cria o ponto de dados\npoint = Point(\"weatherstation\")\npoint.tag(\"location\", \"San Francisco\")\n# Adiciona os campos ao ponto de dados com base nas configurações do JSON\nfor data in influx_config[\"DATA\"]:",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "url = influx_config[\"URL\"]\ntoken = influx_config[\"TOKEN\"]\norg = influx_config[\"ORG\"]\nbucket = influx_config[\"BUCKET\"]\n# Cria o ponto de dados\npoint = Point(\"weatherstation\")\npoint.tag(\"location\", \"San Francisco\")\n# Adiciona os campos ao ponto de dados com base nas configurações do JSON\nfor data in influx_config[\"DATA\"]:\n    field_name = data[\"NAME\"]",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "token = influx_config[\"TOKEN\"]\norg = influx_config[\"ORG\"]\nbucket = influx_config[\"BUCKET\"]\n# Cria o ponto de dados\npoint = Point(\"weatherstation\")\npoint.tag(\"location\", \"San Francisco\")\n# Adiciona os campos ao ponto de dados com base nas configurações do JSON\nfor data in influx_config[\"DATA\"]:\n    field_name = data[\"NAME\"]\n    field_type = data[\"TYPE\"]",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "org",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "org = influx_config[\"ORG\"]\nbucket = influx_config[\"BUCKET\"]\n# Cria o ponto de dados\npoint = Point(\"weatherstation\")\npoint.tag(\"location\", \"San Francisco\")\n# Adiciona os campos ao ponto de dados com base nas configurações do JSON\nfor data in influx_config[\"DATA\"]:\n    field_name = data[\"NAME\"]\n    field_type = data[\"TYPE\"]\n    field_value = None",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "bucket",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "bucket = influx_config[\"BUCKET\"]\n# Cria o ponto de dados\npoint = Point(\"weatherstation\")\npoint.tag(\"location\", \"San Francisco\")\n# Adiciona os campos ao ponto de dados com base nas configurações do JSON\nfor data in influx_config[\"DATA\"]:\n    field_name = data[\"NAME\"]\n    field_type = data[\"TYPE\"]\n    field_value = None\n    if field_type == \"bool\":",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "point",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "point = Point(\"weatherstation\")\npoint.tag(\"location\", \"San Francisco\")\n# Adiciona os campos ao ponto de dados com base nas configurações do JSON\nfor data in influx_config[\"DATA\"]:\n    field_name = data[\"NAME\"]\n    field_type = data[\"TYPE\"]\n    field_value = None\n    if field_type == \"bool\":\n        field_value = True\n    elif field_type == \"int\":",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.script_versao2",
        "description": "mqtt-simulator.mqtt-simulator.script_versao2",
        "peekOfCode": "client = InfluxDBClient(url=url, token=token, org=org)\n# Grava o ponto de dados",
        "detail": "mqtt-simulator.mqtt-simulator.script_versao2",
        "documentation": {}
    },
    {
        "label": "on_connect",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "def on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")\n    # Envia a mensagem para o InfluxDB\n    write_to_influxdb(msg.topic, msg.payload.decode())\n# Função para validar o arquivo de configurações",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "on_message",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "def on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")\n    # Envia a mensagem para o InfluxDB\n    write_to_influxdb(msg.topic, msg.payload.decode())\n# Função para validar o arquivo de configurações\ndef is_valid_file(parser, arg):\n    settings_file = Path(arg)\n    if not settings_file.is_file():\n        return parser.error(f\"argument -f/--file: can't open '{arg}'\")\n    return settings_file",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "is_valid_file",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "def is_valid_file(parser, arg):\n    settings_file = Path(arg)\n    if not settings_file.is_file():\n        return parser.error(f\"argument -f/--file: can't open '{arg}'\")\n    return settings_file\n# Função para escrever os dados no InfluxDB\ndef write_to_influxdb(topic, message):\n    write_client = InfluxDBClient(url=url, token=token, org=org)\n    write_api = write_client.write_api(write_options=SYNCHRONOUS)\n    # Parse a mensagem recebida e grave os dados no InfluxDB",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "write_to_influxdb",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "def write_to_influxdb(topic, message):\n    write_client = InfluxDBClient(url=url, token=token, org=org)\n    write_api = write_client.write_api(write_options=SYNCHRONOUS)\n    # Parse a mensagem recebida e grave os dados no InfluxDB\n    data = json.loads(message)\n    measurement = topic[len(topic_prefix) + 1 :]  # Remove o prefixo do tópico\n    point = Point(measurement)\n    for key, value in data.items():\n        if isinstance(value, bool):\n            point = point.field(key, int(value))",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "default_settings",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "def default_settings():\n    base_folder = Path(__file__).resolve().parent.parent\n    settings_file = base_folder / \"config/settings.json\"\n    return settings_file\nargparser = argparse.ArgumentParser()\nargparser.add_argument(\n    \"-f\",\n    \"--file\",\n    dest=\"settings_file\",\n    type=lambda x: is_valid_file(argparser, x),",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "broker_url",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "broker_url = \"localhost\"  # Endereço IP do HiveMQ\nbroker_port = 1883  # Porta do HiveMQ\ntopic_prefix = \"irrigation\"  # Prefixo dos tópicos a serem inscritos\n# Configurações do InfluxDB\ntoken = \"pCEvuFp9aKDrFFXPKbTDQUN80BLtemqAmHoxpW7lR4md-ZUmcdlIp4IH8Nq-E_U-pu3didUA-FK4T907DSG7-Q==\"\norg = \"my-org\"\nurl = \"http://localhost:8086\"\nbucket = \"irrigation\"\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "broker_port",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "broker_port = 1883  # Porta do HiveMQ\ntopic_prefix = \"irrigation\"  # Prefixo dos tópicos a serem inscritos\n# Configurações do InfluxDB\ntoken = \"pCEvuFp9aKDrFFXPKbTDQUN80BLtemqAmHoxpW7lR4md-ZUmcdlIp4IH8Nq-E_U-pu3didUA-FK4T907DSG7-Q==\"\norg = \"my-org\"\nurl = \"http://localhost:8086\"\nbucket = \"irrigation\"\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "topic_prefix",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "topic_prefix = \"irrigation\"  # Prefixo dos tópicos a serem inscritos\n# Configurações do InfluxDB\ntoken = \"pCEvuFp9aKDrFFXPKbTDQUN80BLtemqAmHoxpW7lR4md-ZUmcdlIp4IH8Nq-E_U-pu3didUA-FK4T907DSG7-Q==\"\norg = \"my-org\"\nurl = \"http://localhost:8086\"\nbucket = \"irrigation\"\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "token = \"pCEvuFp9aKDrFFXPKbTDQUN80BLtemqAmHoxpW7lR4md-ZUmcdlIp4IH8Nq-E_U-pu3didUA-FK4T907DSG7-Q==\"\norg = \"my-org\"\nurl = \"http://localhost:8086\"\nbucket = \"irrigation\"\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "org",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "org = \"my-org\"\nurl = \"http://localhost:8086\"\nbucket = \"irrigation\"\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "url = \"http://localhost:8086\"\nbucket = \"irrigation\"\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "bucket",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "bucket = \"irrigation\"\n# Função de callback para quando a conexão MQTT é estabelecida\ndef on_connect(client, userdata, flags, rc):\n    print(\"Conectado ao HiveMQ\")\n    # Inscreva-se nos tópicos com base no prefixo\n    client.subscribe(topic_prefix + \"/#\")\n# Função de callback para quando uma mensagem MQTT é recebida\ndef on_message(client, userdata, msg):\n    print(f\"Mensagem recebida - Tópico: {msg.topic}, Mensagem: {msg.payload.decode()}\")\n    # Envia a mensagem para o InfluxDB",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "mqtt_client",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "mqtt_client = mqtt.Client()\n# Define as funções de callback\nmqtt_client.on_connect = on_connect\nmqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT\nmqtt_client.loop_start()\n# Configurações do simulador\ndef default_settings():",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "mqtt_client.on_connect",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "mqtt_client.on_connect = on_connect\nmqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT\nmqtt_client.loop_start()\n# Configurações do simulador\ndef default_settings():\n    base_folder = Path(__file__).resolve().parent.parent\n    settings_file = base_folder / \"config/settings.json\"",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "mqtt_client.on_message",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "mqtt_client.on_message = on_message\n# Conecta ao HiveMQ\nmqtt_client.connect(broker_url, broker_port, 60)\n# Inicia o loop para receber mensagens MQTT\nmqtt_client.loop_start()\n# Configurações do simulador\ndef default_settings():\n    base_folder = Path(__file__).resolve().parent.parent\n    settings_file = base_folder / \"config/settings.json\"\n    return settings_file",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "argparser",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "argparser = argparse.ArgumentParser()\nargparser.add_argument(\n    \"-f\",\n    \"--file\",\n    dest=\"settings_file\",\n    type=lambda x: is_valid_file(argparser, x),\n    help=\"settings file\",\n    default=default_settings(),\n)\nargs = argparser.parse_args()",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "args = argparser.parse_args()\n# Inicia o simulador com as configurações fornecidas\nsimulator = Simulator(args.settings_file)\nsimulator.run()",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "simulator",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "description": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "peekOfCode": "simulator = Simulator(args.settings_file)\nsimulator.run()",
        "detail": "mqtt-simulator.mqtt-simulator.scritp_v3",
        "documentation": {}
    },
    {
        "label": "Simulator",
        "kind": 6,
        "importPath": "mqtt-simulator.mqtt-simulator.simulator",
        "description": "mqtt-simulator.mqtt-simulator.simulator",
        "peekOfCode": "class Simulator:\n    def __init__(self, settings_file):\n        self.broker_url = None\n        self.broker_port = None\n        self.topics = []\n        self.load_settings(settings_file)\n    def load_settings(self, settings_file):\n        with open(settings_file) as json_file:\n            config = json.load(json_file)\n            self.broker_url = config['BROKER_URL']",
        "detail": "mqtt-simulator.mqtt-simulator.simulator",
        "documentation": {}
    },
    {
        "label": "on_connect",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.teste",
        "description": "mqtt-simulator.mqtt-simulator.teste",
        "peekOfCode": "def on_connect(client, userdata, flags, rc):\n    print(\"Connected with result code \"+str(rc))\n    # Subscribing in on_connect() means that if we lose the connection and\n    # reconnect then subscriptions will be renewed.\n    client.subscribe(\"temp/#\")\n# The callback for when a PUBLISH message is received from the server.\ndef on_message(client, userdata, msg):\n    print(msg.topic+\" \"+str(msg.payload))\nclient = mqtt.Client()\nclient.on_connect = on_connect",
        "detail": "mqtt-simulator.mqtt-simulator.teste",
        "documentation": {}
    },
    {
        "label": "on_message",
        "kind": 2,
        "importPath": "mqtt-simulator.mqtt-simulator.teste",
        "description": "mqtt-simulator.mqtt-simulator.teste",
        "peekOfCode": "def on_message(client, userdata, msg):\n    print(msg.topic+\" \"+str(msg.payload))\nclient = mqtt.Client()\nclient.on_connect = on_connect\nclient.on_message = on_message\nclient.connect(\"localhost\", 1883, 60)\n# Blocking call that processes network traffic, dispatches callbacks and\n# handles reconnecting.\n# Other loop*() functions are available that give a threaded interface and a\n# manual interface.",
        "detail": "mqtt-simulator.mqtt-simulator.teste",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.teste",
        "description": "mqtt-simulator.mqtt-simulator.teste",
        "peekOfCode": "client = mqtt.Client()\nclient.on_connect = on_connect\nclient.on_message = on_message\nclient.connect(\"localhost\", 1883, 60)\n# Blocking call that processes network traffic, dispatches callbacks and\n# handles reconnecting.\n# Other loop*() functions are available that give a threaded interface and a\n# manual interface.\nclient.loop_forever()",
        "detail": "mqtt-simulator.mqtt-simulator.teste",
        "documentation": {}
    },
    {
        "label": "client.on_connect",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.teste",
        "description": "mqtt-simulator.mqtt-simulator.teste",
        "peekOfCode": "client.on_connect = on_connect\nclient.on_message = on_message\nclient.connect(\"localhost\", 1883, 60)\n# Blocking call that processes network traffic, dispatches callbacks and\n# handles reconnecting.\n# Other loop*() functions are available that give a threaded interface and a\n# manual interface.\nclient.loop_forever()",
        "detail": "mqtt-simulator.mqtt-simulator.teste",
        "documentation": {}
    },
    {
        "label": "client.on_message",
        "kind": 5,
        "importPath": "mqtt-simulator.mqtt-simulator.teste",
        "description": "mqtt-simulator.mqtt-simulator.teste",
        "peekOfCode": "client.on_message = on_message\nclient.connect(\"localhost\", 1883, 60)\n# Blocking call that processes network traffic, dispatches callbacks and\n# handles reconnecting.\n# Other loop*() functions are available that give a threaded interface and a\n# manual interface.\nclient.loop_forever()",
        "detail": "mqtt-simulator.mqtt-simulator.teste",
        "documentation": {}
    },
    {
        "label": "Topic",
        "kind": 6,
        "importPath": "mqtt-simulator.mqtt-simulator.topic",
        "description": "mqtt-simulator.mqtt-simulator.topic",
        "peekOfCode": "class Topic(ABC):\n    def __init__(self, broker_url, broker_port, topic_url, topic_data, retain_probability):\n        self.broker_url = broker_url\n        self.broker_port = broker_port\n        self.topic_url = topic_url\n        self.topic_data = topic_data\n        self.retain_probability = retain_probability\n        self.client = None\n    def connect(self):\n        self.client = mqtt.Client(self.topic_url, clean_session=True, transport='tcp')",
        "detail": "mqtt-simulator.mqtt-simulator.topic",
        "documentation": {}
    },
    {
        "label": "TopicAuto",
        "kind": 6,
        "importPath": "mqtt-simulator.mqtt-simulator.topic",
        "description": "mqtt-simulator.mqtt-simulator.topic",
        "peekOfCode": "class TopicAuto(Topic, threading.Thread):\n    def __init__(self, broker_url, broker_port, topic_url, topic_data, retain_probability, time_interval):\n        Topic.__init__(self, broker_url, broker_port, topic_url, topic_data, retain_probability)\n        threading.Thread.__init__(self, args=(), kwargs=None)\n        self.time_interval = time_interval\n        self.old_payload = None\n    def run(self):\n        self.connect()\n        while True:\n            payload = self.generate_data()",
        "detail": "mqtt-simulator.mqtt-simulator.topic",
        "documentation": {}
    }
]